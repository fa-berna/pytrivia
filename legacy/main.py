import math

from pytrivia.base import query_random_question
from pytrivia.utils import alphabetic_range, cls

cached_questions = {}


def show_welcome_message():
    # Generated by: https://www.fancytextpro.com/BigTextGenerator/
    message = """
    
                Welcome to
            
    ____       ______     _       _      
   / __ \__  _/_  __/____(_)   __(_)___ _
  / /_/ / / / // / / ___/ / | / / / __ `/
 / ____/ /_/ // / / /  / /| |/ / / /_/ / 
/_/    \__, //_/ /_/  /_/ |___/_/\__,_/  
      /____/         
      
          Press Enter to continue                                           
    """
    _ = input(message)


def get_n_max_answers_from_user():
    max_answers = input("Choose the max. number of possible answers (blank = no restriction): ")
    if max_answers.isdigit():
        max_answers = int(max_answers)
    elif max_answers == '':
        max_answers = None
    else:
        print("Invalid input!")
        max_answers = get_n_max_answers_from_user()
    return max_answers


def get_pos_int_input_from_user(input_text):
    inpt = input(input_text)
    if inpt.isdigit() & int(inpt) >= 0:
        inpt = int(inpt)
    else:
        print("Invalid input!")
        inpt = get_pos_int_input_from_user(input_text)
    return inpt


def print_blank_line():
    return print("\n")


def print_hashtag_separation(length=55):
    print("#"*length)


def print_dashed_separation(length=55):
    print("-" * length)


def print_title(text):
    print_hashtag_separation(55)
    print(" "*math.floor((55-len(text))/2)+text.upper())
    print_hashtag_separation(55)


def ask_user_to_continue():
    inpt1 = input("Press enter to continue (or enter Q to quit)")
    if inpt1 == '':
        return True
    elif inpt1.lower() == 'q':
        exit_conf = get_user_exit_confirmation()
        if exit_conf:
            return False
        else:
            return ask_user_to_continue()
    else:
        print("Invalid input!")
        return ask_user_to_continue()


def ask_user_to_play_again():
    inpt1 = input("Press enter to play again (or enter Q to quit)")
    if inpt1 == '':
        return True
    elif inpt1.lower() == 'q':
        return False
    else:
        print("Invalid input!")
        return ask_user_to_continue()


def get_user_exit_confirmation():
    inpt = input("Your progress won't be saved. Are you sure that you want to quit? Y/n")
    if inpt.lower() == 'y':
        return True
    elif inpt.lower() == 'n':
        return False
    else:
        print("Invalid input!")
        return get_user_exit_confirmation()


show_welcome_message()
print_blank_line()
cls()

print_title("SUMMARY")
print_blank_line()

print_title("SETUP")
print_blank_line()

pos_pts = get_pos_int_input_from_user("Choose number of points that you gain for each good answer: ")
neg_pts = get_pos_int_input_from_user("Choose number of points that you lose for each good answer: ")
n_max = get_n_max_answers_from_user()
print_blank_line()

points = 0
round = 0
max_pts = 0
keep_playing = True

while keep_playing:

    while points > 0 or round == 0:

        round += 1
        if points > max_pts:
            max_pts = points

        question_success_flag = 0
        while question_success_flag == 0:
            question = query_random_question()
            if question.text not in cached_questions:
                question_success_flag = 1
                cached_questions[question.text] = question
        answers = question.get_randomly_ordered_answers(n_max=n_max)

        print_title(f"ROUND {round}")
        print_blank_line()
        print(f"Current points: {points}")
        print_blank_line()
        print(f"(Category: {question.category.formatted_str})")
        print_blank_line()
        print(f"{question.text}")
        print_dashed_separation(55)

        dict_answers = {k: v for k, v in zip(alphabetic_range(len(answers)), answers)}
        for key, ans in dict_answers.items():
            print(f"{key}) {ans.text}")
        print_blank_line()
        input_key, input_count = None, 0
        while input_key not in dict_answers.keys():
            if input_count > 0:
                print("Invalid input!")
            input_key = input("Answer: ").lower()
            input_count += 1
        tf = dict_answers[input_key].is_correct
        if tf:
            points += pos_pts
            print(f"GOOD! +{pos_pts} points")
        else:
            points -= neg_pts
            print(f"WRONG! -{neg_pts} points")
            right_answer = question.correct_answer
            right_key = [k for k in dict_answers.keys() if dict_answers[k] == right_answer][0]
            print(f"The correct answer was: {right_key}) {right_answer.text}")
            if points <= 0:
                break

        keep_playing = ask_user_to_continue()
        print_blank_line()

    print_blank_line()
    print_title("GAME OVER")
    print_blank_line()
    print("Congratulations! You have set a new high score!")
    print("Congratulations! You have set a new record for the number of rounds played!")
    print(f"Your highest score is {2}")
    print(f"The maximum number of rounds played is {10}")
    print_blank_line()

    keep_playing = ask_user_to_play_again()
    print_blank_line()
    if keep_playing:
        round = 0
        points = 0